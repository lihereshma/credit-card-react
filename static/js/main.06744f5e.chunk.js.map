{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["toast","configure","App","useState","number","setNumber","name","setName","expiry","setExpiry","cvc","setCvc","focus","setFocus","className","focused","onSubmit","e","error","position","POSITION","TOP_CENTER","autoClose","success","preventDefault","onReset","htmlFor","type","placeholder","value","maxLength","onChange","target","onFocus","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+PAQAA,IAAMC,YAsGSC,MApGf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGeJ,mBAAS,IAHxB,mBAGNK,EAHM,KAGEC,EAHF,OAISN,mBAAS,IAJlB,mBAINO,EAJM,KAIDC,EAJC,OAKaR,mBAAS,IALtB,mBAKNS,EALM,KAKCC,EALD,KAuBb,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,wBACb,kBAAC,IAAD,CACEV,OAAWA,EACXE,KAASA,EACTE,OAAWA,EACXE,IAAQA,EACRK,QAAYH,KAIhB,0BAAMI,SA7BS,SAACC,GACN,KAAXb,GAA0B,KAATE,GAA0B,KAAXE,GAAyB,KAARE,EAClDV,IAAMkB,MAAM,uBAAwB,CAAEC,SAAUnB,IAAMoB,SAASC,WAAYC,WAAW,IAEtFtB,IAAMuB,QAAQ,0BAA2B,CAAEJ,SAAUnB,IAAMoB,SAASC,WAAYC,WAAW,IAE7FL,EAAEO,kBAuBkCC,QApBlB,SAACR,GACnBZ,EAAU,IACVE,EAAQ,IACRE,EAAU,IACVE,EAAO,KAgBqDG,UAAU,YAChE,yBAAKA,UAAU,cACb,2BAAOY,QAAQ,UAAf,eACA,2BACEC,KAAK,MACLb,UAAU,eACVR,KAAK,SACLsB,YAAY,SACZC,MAAQzB,EACR0B,UAAY,KACZC,SAAW,SAAAd,GAAC,OAAIZ,EAAUY,EAAEe,OAAOH,QACnCI,QAAU,SAAAhB,GAAC,OAAIJ,EAASI,EAAEe,OAAO1B,UAIrC,yBAAKQ,UAAU,cACb,2BAAOY,QAAQ,QAAf,oBACA,2BACEC,KAAK,OACLb,UAAU,eACVR,KAAK,OACLsB,YAAY,OACZC,MAAQvB,EACRyB,SAAW,SAAAd,GAAC,OAAIV,EAAQU,EAAEe,OAAOH,QACjCI,QAAU,SAAAhB,GAAC,OAAIJ,EAASI,EAAEe,OAAO1B,UAIrC,yBAAKQ,UAAU,YACb,yBAAKA,UAAU,uBACb,2BAAOY,QAAQ,UAAf,mBACA,2BACEC,KAAK,MACLb,UAAU,eACVR,KAAK,SACLsB,YAAY,QACZC,MAAQrB,EACRuB,SAAW,SAAAd,GAAC,OAAIR,EAAUQ,EAAEe,OAAOH,QACnCI,QAAU,SAAAhB,GAAC,OAAIJ,EAASI,EAAEe,OAAO1B,UAIrC,yBAAKQ,UAAU,uBACb,2BAAOY,QAAQ,OAAf,iBACA,2BACEC,KAAK,MACLb,UAAU,eACVR,KAAK,MACLsB,YAAY,MACZC,MAAQnB,EACRqB,SAAW,SAAAd,GAAC,OAAIN,EAAOM,EAAEe,OAAOH,QAChCI,QAAU,SAAAhB,GAAC,OAAIJ,EAASI,EAAEe,OAAO1B,WAKvC,4BAAQqB,KAAK,SAASb,UAAU,+BAAhC,UACA,4BAAQa,KAAK,QAAQb,UAAU,4BAA/B,aC3FUoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMkC,a","file":"static/js/main.06744f5e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Cards from 'react-credit-cards'\r\nimport 'react-credit-cards/es/styles-compiled.css'\r\nimport { toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\ntoast.configure()\r\n\r\nfunction App() {\r\n  const [number, setNumber] = useState('')\r\n  const [name, setName] = useState('')\r\n  const [expiry, setExpiry] = useState('')\r\n  const [cvc, setCvc] = useState('')\r\n  const [focus, setFocus] = useState('')\r\n\r\n  const handleSubmit = (e) => {\r\n    if(number === '' || name === '' || expiry === '' || cvc === '') {\r\n      toast.error(\"All fields required.\", { position: toast.POSITION.TOP_CENTER, autoClose: false })\r\n    } else {\r\n      toast.success(\"Submitted Successfully.\", { position: toast.POSITION.TOP_CENTER, autoClose: false })\r\n    }\r\n    e.preventDefault();\r\n  }\r\n\r\n  const handleReset = (e) => {\r\n    setNumber('')\r\n    setName('')\r\n    setExpiry('')\r\n    setCvc('')\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"credit-card col-md-5\">\r\n          <Cards \r\n            number = { number }\r\n            name = { name }\r\n            expiry = { expiry }\r\n            cvc = { cvc }\r\n            focused = { focus }\r\n          />\r\n        </div>\r\n      \r\n        <form onSubmit={ handleSubmit } onReset={ handleReset } className=\"col-md-5\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"number\">card number</label>\r\n            <input \r\n              type='tel' \r\n              className=\"form-control\"\r\n              name='number' \r\n              placeholder='Number' \r\n              value={ number } \r\n              maxLength = '16'\r\n              onChange={ e => setNumber(e.target.value)} \r\n              onFocus={ e => setFocus(e.target.name)}\r\n            />\r\n          </div>\r\n            \r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"name\">card holder name</label>\r\n            <input \r\n              type='text' \r\n              className=\"form-control\"\r\n              name='name' \r\n              placeholder='Name' \r\n              value={ name } \r\n              onChange={ e => setName(e.target.value)} \r\n              onFocus={ e => setFocus(e.target.name)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-row\">\r\n            <div className=\"form-group col-md-6\">\r\n              <label htmlFor=\"expiry\">expiration date</label>\r\n              <input \r\n                type='tel' \r\n                className=\"form-control\"\r\n                name='expiry' \r\n                placeholder='MM/YY' \r\n                value={ expiry } \r\n                onChange={ e => setExpiry(e.target.value)} \r\n                onFocus={ e => setFocus(e.target.name)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-6\">\r\n              <label htmlFor=\"cvc\">security code</label>\r\n              <input \r\n                type='tel'\r\n                className=\"form-control\" \r\n                name='cvc' \r\n                placeholder='cvc' \r\n                value={ cvc } \r\n                onChange={ e => setCvc(e.target.value)} \r\n                onFocus={ e => setFocus(e.target.name)}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <button type=\"submit\" className=\"btn btn-primary btn-sm mr-2\">Submit</button>\r\n          <button type=\"reset\" className=\"btn btn-secondary btn-sm\">Reset</button>\r\n        </form>\r\n      </div>      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}